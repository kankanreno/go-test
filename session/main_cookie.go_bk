package main

import (
	"fmt"
	"github.com/gorilla/securecookie"
	"github.com/gorilla/sessions"
	"log"
	"net/http"
)

// custom session stores
var store = sessions.NewCookieStore(securecookie.GenerateRandomKey(32), securecookie.GenerateRandomKey(32))

func set(w http.ResponseWriter, r *http.Request) {
    // Get a session. We're ignoring the error resulted from decoding an
    // existing session: Get() always returns a session, even if empty.
	session, _ := store.Get(r, "session_id")

	// Set some session values.
	session.Values["name"] = "看看"
	session.Values["account"] = "kankan"

	// Save it before we write to the response/return from the handler.
    if err := session.Save(r, w); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	fmt.Fprintln(w, "Hello World")
}

func read(w http.ResponseWriter, r *http.Request) {
	session, _ := store.Get(r, "session_id")
	fmt.Fprintf(w, "name: %s, account: %s", session.Values["name"], session.Values["account"])
}

func main() {
	http.HandleFunc("/set", set)
	http.HandleFunc("/read", read)
	log.Fatal(http.ListenAndServe(":9999", nil))
}
